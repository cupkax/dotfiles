#+TITLE: Emacs Config
#+PROPERTY: header-args emacs-lisp :tangle "~/dotfiles/editor/emacs/init.el"

* Table of Contents                                                     :TOC_3:
- [[#startup][Startup]]
  - [[#lexical-binding][Lexical Binding]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#define-constants][Define Constants]]
  - [[#clean-emacsd][Clean .emacs.d]]
    - [[#backups][Backups]]
    - [[#history][History]]
    - [[#recent-files][Recent Files]]
    - [[#custom-file][Custom File]]
  - [[#utf-8-unix-system][=utf-8-unix= System]]
  - [[#set-default-language][Set Default Language]]
  - [[#c-z][C-z]]
  - [[#uniform-starting-directory][Uniform Starting Directory]]
- [[#package-management][Package Management]]
  - [[#package-archives][Package Archives]]
  - [[#configure-package-manager][Configure Package Manager]]
  - [[#use-package][Use Package]]
  - [[#auto-update-packages][Auto update packages]]
  - [[#libraries][Libraries]]
- [[#personal-information][Personal Information]]
- [[#uiux--other-visuals][UI/UX & Other Visuals]]
  - [[#aesthetic-changes][Aesthetic changes]]
  - [[#fonts-and-icons][Fonts and Icons]]
    - [[#fonts][Fonts]]
    - [[#all-the-icons][All the icons]]
  - [[#prettify-symbols][Prettify Symbols]]
  - [[#dashboard][Dashboard]]
  - [[#themes][Themes]]
  - [[#modeline][Modeline]]
    - [[#doom-modeline][Doom Modeline]]
    - [[#current-time][Current Time]]
    - [[#yesno---yn][Yes/No -> y/n]]
- [[#bindings][Bindings]]
  - [[#leader-key][Leader Key]]
  - [[#which-key][Which Key]]
  - [[#esc-cancel][ESC Cancel]]
  - [[#keychord][Keychord]]
  - [[#hydra][Hydra]]
- [[#buffer-and-window-management][Buffer and Window Management]]
  - [[#window-management][Window Management]]
    - [[#frame-scalingzooming][Frame Scaling/Zooming]]
    - [[#window-selection][Window Selection]]
    - [[#window-history][Window History]]
- [[#navigation][Navigation]]
  - [[#ivy][Ivy]]
- [[#development][Development]]
  - [[#company][Company]]
  - [[#languages][Languages]]
    - [[#language-server-protocol][Language Server Protocol]]
  - [[#productivity][Productivity]]
    - [[#syntax-check][Syntax Check]]
    - [[#format-all][Format All]]
    - [[#indention][Indention]]
    - [[#parentheses][Parentheses]]
- [[#org][Org]]
  - [[#org-load-path][Org Load Path]]
  - [[#org-config][Org Config]]
    - [[#basic-setup][Basic Setup]]
    - [[#org-source-code-blocks][Org Source Code Blocks]]
    - [[#tangle-save][Tangle Save]]
  - [[#bibtex][Bibtex]]
  - [[#org-ref][Org-Ref]]
  - [[#roam][Roam]]
    - [[#org-roam][Org-Roam]]
    - [[#org-roam-bibtex][Org-Roam-Bibtex]]
  - [[#org-noter][Org-Noter]]
  - [[#org-capture][Org-Capture]]
  - [[#pdf][PDF]]
    - [[#org-pdftools][Org-PDFTools]]
    - [[#org-noter-pdftools][Org-Noter-PDFTools]]
  - [[#writing][Writing]]
    - [[#olivetti][Olivetti]]
    - [[#line-spacing][Line Spacing]]
    - [[#export][Export]]
  - [[#toc][TOC]]
- [[#pdf-1][PDF]]
  - [[#pdf-tools][PDF Tools]]
- [[#start-server][Start Server]]

* Startup
** Lexical Binding
#+begin_src emacs-lisp
  ;;; init.el --- -*- lexical-binding: t -*-
#+end_src
** Garbage Collection
A large =gc-cons-threshold= may cause freezing and stuttering during long-term interactive use.
If freezing, decrease this amount. If stuttering, increase this amount.
#+begin_src emacs-lisp
  (defvar better-gc-cons-threshold 67108864)
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-threshold better-gc-cons-threshold)
	      (setq file-name-handler-alist file-name-handler-alist-original)
	      (makunbound 'file-name-handler-alist-original)))
#+end_src

Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (if (boundp 'after-focus-change-function)
                  (add-function :after after-focus-change-function
                                (lambda ()
                                  (unless (frame-focus-state)
                                    (garbage-collect))))
                (add-hook 'after-focus-change-function 'garbage-collect))
              (defun gc-minibuffer-setup-hook ()
                (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

              (defun gc-minibuffer-exit-hook ()
                (garbage-collect)
                (setq gc-cons-threshold better-gc-cons-threshold))

              (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
              (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+end_src
** Define Constants
#+begin_src emacs-lisp
(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst python-p
  (or (executable-find "python3")
      (and (executable-find "python")
           (> (length (shell-command-to-string "python --version | grep 'Python 3'")) 0)))
  "Do we have python3?")

(defconst pip-p
  (or (executable-find "pip3")
      (and (executable-find "pip")
           (> (length (shell-command-to-string "pip --version | grep 'python 3'")) 0)))
  "Do we have pip3?")

(defconst eaf-env-p
  (and *sys/linux* (display-graphic-p) python-p pip-p
       (not (equal (shell-command-to-string "pip freeze | grep '^PyQt\\|PyQtWebEngine'") "")))
  "Do we have EAF environment setup?")
#+end_src
** Clean .emacs.d
*** Backups
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
#+end_src
*** History
#+begin_src emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+end_src
*** Recent Files
#+begin_src emacs-lisp
(require 'recentf)
(setq recentf-max-saved-items 200
      recentf-max-menu-items 15)
(recentf-mode)
#+end_src

*** Custom File
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file t)
#+end_src
** =utf-8-unix= System
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8-unix) 
#+end_src

** Set Default Language
#+begin_src emacs-lisp
(setenv "LANG" "en_GB")
#+end_src
** C-z
#+begin_src emacs-lisp
  (global-set-key (kbd "C-z") 'undo) ;Emacs default is bound to hide Emacs.
  (global-set-key (kbd "C-SPC") nil)
#+end_src

** Uniform Starting Directory
#+begin_src emacs-lisp
(setq default-directory "~/" )
#+end_src

* Package Management
** Package Archives
#+begin_src emacs-lisp
(setq package-archives
      '(("gnu"   . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")))
#+end_src

** Configure Package Manager
#+begin_src emacs-lisp
  (unless (bound-and-true-p package--initialized)
    (setq package-enable-at-startup nil)          ; To prevent initializing twice
    (package-initialize))

  ;; set use-package-verbose to t for interpreted .emacs,
  ;; and to nil for byte-compiled .emacs.elc.
  (eval-and-compile
    (setq use-package-verbose (not (bound-and-true-p byte-compile-current-file))))
#+end_src

** Use Package
#+begin_src emacs-lisp
  ;; Install use-package if not installed
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t)
    (setq use-package-compute-statistics t)
    (setq use-package-enable-imenu-support t))

  (eval-when-compile
    (require 'use-package)
    (require 'bind-key))
#+end_src

** Auto update packages
#+begin_src emacs-lisp
  (use-package auto-package-update
    :if (not (daemonp))
    :custom
    (auto-package-update-interval 7) ;; in days
    (auto-package-update-prompt-before-update t)
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))
#+end_src

** Libraries
#+begin_src emacs-lisp
(use-package dash :ensure t)
(use-package diminish :ensure t)
#+end_src

* Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Vedant Sansare")
(setq user-mail-address "vedantsansare23@gmail.com")
#+end_src

* UI/UX & Other Visuals
** Aesthetic changes
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq-default indent-tabs-mode nil)
  (setq pop-up-windows nil)
  (tool-bar-mode 0) 
  ;(tooltip-mode  0)
  (scroll-bar-mode 0)

  ;; Underline line at descent position, not baseline position
  (setq x-underline-at-descent-line t)
#+end_src

** Fonts and Icons
*** Fonts
**** Font Face
#+begin_src emacs-lisp
;; Set the font face based on platform
 (set-face-attribute 'default nil :font "FiraCode Nerd Font"  :height 110)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height 110)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 120)
#+end_src

**** Unicode Support
#+begin_src emacs-lisp
(defun my/replace-unicode-font-mapping (block-name old-font new-font)
  (let* ((block-idx (cl-position-if
                         (lambda (i) (string-equal (car i) block-name))
                         unicode-fonts-block-font-mapping))
         (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
         (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
    (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
          `(,updated-block))))

(use-package unicode-fonts
  :ensure t
  :custom
  (unicode-fonts-skip-font-groups '(low-quality-glyphs))
  :config
  ;; Fix the font mappings to use the right emoji font
  (mapcar
    (lambda (block-name)
      (my/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
    '("Dingbats"
      "Emoticons"
      "Miscellaneous Symbols and Pictographs"
      "Transport and Map Symbols"))
  (unicode-fonts-setup))
#+end_src

*** All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))
#+end_src

** Prettify Symbols
Make some word or string show as pretty Unicode symbols.
#+begin_src emacs-lisp
  (global-prettify-symbols-mode 1)
  (defun add-pretty-lambda ()
    (setq prettify-symbols-alist
	  '(
	    ("lambda" . 955)
	    ("delta" . 120517)
	    ("epsilon" . 120518)
	    ("->" . 8594)
	    ("<=" . 8804)
	    (">=" . 8805)
	    )))
  (add-hook 'prog-mode-hook 'add-pretty-lambda)
  (add-hook 'org-mode-hook 'add-pretty-lambda)
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome Vedant")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil))
#+end_src

** Themes
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
  (use-package doom-themes
    :config
    ;Flash mode-line on error
    (doom-themes-visual-bell-config)

    ;Corrects org-mode’s native fontification
    (doom-themes-org-config)

    ;An interactive funtion to switch themes.
    (defun cpkx/switch-theme ()
    (interactive)
    (disable-theme (intern (car (mapcar #'symbol-name custom-enabled-themes))))
    (call-interactively #'load-theme))

    ;Set Theme
    (load-theme 'doom-dracula t))
#+end_src
** Modeline
*** Doom Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    ;; Don't compact font caches during GC. Windows Laggy Issue
    (inhibit-compacting-font-caches t)
    (doom-modeline-height 15)
    (doom-modeline-lsp t)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-color-icon t))
#+end_src

*** Current Time
#+begin_src emacs-lisp
  (display-time-mode 1)
#+end_src

*** Yes/No -> y/n
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
**** TODO Diminish Buffer Face Mode
Temporary solution to remove buffer face mode from modeline
#+begin_src emacs-lisp
  (eval-after-load "face-remap"
    '(diminish 'buffer-face-mode))
#+end_src

* Bindings
** Leader Key
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer cpkx/leader-key-def
      :prefix "C-SPC")

    (general-create-definer cpkx/ctrl-c-keys
      :prefix "C-c"))
#+end_src

** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :custom
  (which-key-separator " ")
  (which-key-prefix-prefix "+")
  :config
  (setq which-key-idle-delay 0)
  (which-key-mode))
#+end_src
** ESC Cancel
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** TODO Keychord
** TODO Hydra

* Buffer and Window Management
** Window Management
*** Frame Scaling/Zooming
#+begin_src emacs-lisp
(use-package default-text-scale
  :defer 1
  :config
  (default-text-scale-mode))
#+end_src
*** Window Selection
#+begin_src emacs-lisp
(use-package ace-window
  :bind (("M-o" . ace-window))
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
*** Window History
#+begin_src emacs-lisp
(winner-mode)
#+end_src
* Navigation
** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :init
    (use-package counsel :defer t)
    (use-package swiper :defer t)
    (ivy-mode 1)
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           :map ivy-switch-buffer-map
           ("TAB" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    ;; Use different regex strategies per completion command
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)

    ;; Set minibuffer height for different commands
    (setf (alist-get 'swiper ivy-height-alist) 15))


  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

  (use-package ivy-hydra
    :defer t
    :after hydra)

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
    :config
    (setq ivy-format-function #'ivy-format-function-line))

  (use-package counsel
    :diminish counsel-mode
    :ensure t
    :bind
    (("M-x"     . counsel-M-x)
     ("C-M-j"   . 'counsel-switch-buffer)
     ("C-x C-f" . counsel-find-file)
     ("C-M-l"   . counsel-imenu)
     :map minibuffer-local-map
     ("C-r"     . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)
    (counsel-mode 1))

  (use-package flx  ;; Improves sorting for fuzzy-matched results
    :defer t
    :init
    (setq ivy-flx-limit 10000))

  (cpkx/leader-key-def
    "f"   '(:ignore t :which-key "files")
    "fr"  '(counsel-recentf :which-key "recent files")
    "fR"  '(revert-buffer :which-key "revert file"))
#+end_src

* Development
** Company
#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :diminish company-box-mode
    :hook (company-mode . company-box-mode))
#+end_src

** Languages
*** Language Server Protocol
#+begin_src emacs-lisp
  (defun cpkx/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . cpkx/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)
    :custom
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
    (lsp-file-watch-threshold 2000)
    (read-process-output-max (* 1024 1024))
    (lsp-eldoc-hook nil))

  (use-package lsp-ui
    :after lsp-mode
    :diminish
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions nil)
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover nil)
    (setq lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))
#+end_src

** Productivity
*** Syntax Check
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :diminish
    :hook ((prog-mode markdown-mode) . flycheck-mode)
    :custom
    (flycheck-global-modes
     '(not text-mode outline-mode fundamental-mode org-mode
           diff-mode shell-mode eshell-mode term-mode))
    (flycheck-emacs-lisp-load-path 'inherit)
    (flycheck-indication-mode 'right-fringe)
    :init
    (use-package flycheck-grammarly :defer t)
    (if (display-graphic-p)
        (use-package flycheck-posframe
          :custom-face (flycheck-posframe-border-face ((t (:inherit default))))
          :hook (flycheck-mode . flycheck-posframe-mode)
          :custom
          (flycheck-posframe-border-width 1)
          (flycheck-posframe-inhibit-functions
           '((lambda (&rest _) (bound-and-true-p company-backend)))))
      (use-package flycheck-pos-tip
        :defines flycheck-pos-tip-timeout
        :hook (flycheck-mode . flycheck-pos-tip-mode)
        :custom (flycheck-pos-tip-timeout 30)))
    :config
    (when (fboundp 'define-fringe-bitmap)
      (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
        [16 48 112 240 112 48 16] nil nil 'center)))
#+end_src

*** Format All
#+begin_src emacs-lisp
(use-package format-all
  :bind ("C-c C-f" . format-all-buffer))
#+end_src

*** Indention
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :diminish
    :hook ((prog-mode) . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-responsive 'top)
    (highlight-indent-guides-delay 0)
    (highlight-indent-guides-auto-character-face-perc 7))
#+end_src

*** Parentheses
**** Smart Paren
#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :diminish smartparens-mode
    :config
    ;; Stop pairing single quotes in elisp
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'org-mode "[" nil :actions nil))
#+end_src
**** Show Paren
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

**** Rainbow
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Org
** Org Load Path
#+begin_src emacs-lisp
(use-package org
  :load-path ("~/.emacs.d/site-packages/org-mode/lisp" "~/.emacs.d/site-packages/org-mode/contrib/lisp"))
#+end_src

** Org Config
*** Basic Setup
#+begin_src emacs-lisp
  (defun cpkx/org-mode-setup ()
    (org-indent-mode)
    (diminish 'org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0))

  (use-package org
    :diminish t
    :hook (org-mode . cpkx/org-mode-setup)
    :config
    (setq org-directory "~/Dropbox/org"))
#+end_src

*** Org Source Code Blocks
**** Org Structure Template
#+begin_src emacs-lisp
  (use-package org
    :diminish
    :config
    (setq org-structure-template-alist
	'(("e" . "src emacs-lisp"))))
#+end_src

*** Tangle Save
#+begin_src emacs-lisp
(defun cpkx/org-babel-tangle-save ()
  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle)))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'cpkx/org-babel-tangle-save
                                         'run-at-end 'only-in-org-mode)))
#+end_src

** Bibtex
#+begin_src emacs-lisp
  (setq bibtex-completion-bibliography    '("~/Dropbox/org/Research/zotLib.bib"))
  (setq bibtex-completion-library-path      "~/Dropbox/org/Research/zotero-library/")
  (setq bibtex-completion-notes-path        "D:/Work/Study/PhD/Research/Notes/")
  (setq bibtex-completion-pdf-field "file")
  (setq bibtex-completion-notes-template-multiple-files
        (concat
         "#+TITLE: ${title}\n"
         "#+ROAM_KEY: cite:${=key=}\n"
         "* TODO Notes\n"
         ":PROPERTIES:\n"
         ":Custom_ID: ${=key=}\n"
         ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
         ":AUTHOR: ${author-abbrev}\n"
         ":JOURNAL: ${journaltitle}\n"
         ":DATE: ${date}\n"
         ":YEAR: ${year}\n"
         ":DOI: ${doi}\n"
         ":URL: ${url}\n"
         ":END:\n\n"
         ))
#+end_src

** Org-Ref
#+begin_src emacs-lisp
  (use-package org-ref
    :config
    (setq org-ref-pdf-directory               "~/Dropbox/org/Research/zotero-library/")
    (setq org-ref-default-bibliography  (list "~/Dropbox/org/Research/zotLib.bib"))
    (setq org-ref-bibliography-notes          "D:/Work/Study/PhD/Research/Notes/bibnotes.org")
    (setq org-ref-notes-directory             "D:/Work/Study/PhD/Research/Notes/")
    (setq org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n")
    (setq org-ref-notes-function            'orb-edit-notes)
    (setq org-ref-completion-library        'org-ref-ivy-cite)
    (setq org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex))
    #+end_src

** Roam
*** Org-Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :hook (org-load . org-roam-mode)
    :commands (org-roam-buffer-toggle-display
               org-roam-find-file
               org-roam-graph
               org-roam-insert
               org-roam-switch-to-buffer
               org-roam-dailies-date
               org-roam-dailies-today
               org-roam-dailies-tomorrow
               org-roam-dailies-yesterday)
    :preface
    ;; Set this to nil so we can later detect whether the user has set a custom
    ;; directory for it, and default to `org-directory' if they haven't.
    (defvar org-roam-directory nil)
    :init
    :config
    (setq org-roam-directory "D:/Work/Study/PhD/Research/Notes/"
          org-roam-verbose nil  ; https://youtu.be/fn4jIlFwuLU
          org-roam-buffer-no-delete-other-windows t ; make org-roam buffer sticky
          org-roam-completion-system 'default
          )

    ;; Normally, the org-roam buffer doesn't open until you explicitly call
    ;; `org-roam'. If `+org-roam-open-buffer-on-find-file' is non-nil, the
    ;; org-roam buffer will be opened for you when you use `org-roam-find-file'
    ;; (but not `find-file', to limit the scope of this behavior).
    (add-hook 'find-file-hook
              (defun +org-roam-open-buffer-maybe-h ()
                (and +org-roam-open-buffer-on-find-file
                     (memq 'org-roam-buffer--update-maybe post-command-hook)
                     (not (window-parameter nil 'window-side)) ; don't proc for popups
                     (not (eq 'visible (org-roam-buffer--visibility)))
                     (with-current-buffer (window-buffer)
                       (org-roam-buffer--get-create)))))

    ;; Hide the mode line in the org-roam buffer, since it serves no purpose. This
    ;; makes it easier to distinguish among other org buffers.
    (add-hook 'org-roam-buffer-prepare-hook #'hide-mode-line-mode))


  ;; Since the org module lazy loads org-protocol (waits until an org URL is
  ;; detected), we can safely chain `org-roam-protocol' to it.
  (use-package org-roam-protocol
    :after org-protocol)


  (use-package company-org-roam
    :after org-roam)
#+end_src

*** Org-Roam-Bibtex
#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :after (org-roam)
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :config
    (setq org-roam-bibtex-preformat-keywords
          '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
    (setq orb-templates
          '(("r" "ref" plain (function org-roam-capture--get-point)
             ""
             :file-name "${slug}"
             :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

  - tags ::
  - keywords :: ${keywords}

  \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

             :unnarrowed t))))
#+end_src

** Org-Noter
#+begin_src emacs-lisp
  (use-package org-noter
    :after (:any org pdf-view)
    :config
    (setq
     ;; The WM can handle splits
     org-noter-notes-window-location 'other-frame
     ;; Please stop opening frames
     org-noter-always-create-frame nil
     ;; I want to see the whole file
     org-noter-hide-other nil
     ;; Everything is relative to the main notes file
     org-noter-notes-search-path (list "D:/Work/Study/PhD/Research/Notes")
     )
    )
#+end_src

** PDF
*** Org-PDFTools
#+begin_src emacs-lisp
(use-package org-pdftools
  :hook (org-mode . org-pdftools-setup-link))
#+end_src

*** Org-Noter-PDFTools
#+begin_src emacs-lisp
(use-package org-noter-pdftools
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

** Writing
*** Olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :hook ((text-mode) . olivetti-mode)
    :diminish
    (olivetti-mode)
    :config
    (setq olivetti-body-width 0.7)
    (setq olivetti-minimum-body-width 80)
    (setq olivetti-recall-visual-line-mode-entry-state t))
  (diminish 'visual-line-mode)
#+end_src

*** Line Spacing
#+begin_src emacs-lisp
;;; Line spacing, can be 0 for code and 1 or 2 for text
(setq-default line-spacing 2)
#+end_src

*** Export
**** Pandoc
#+begin_src emacs-lisp
  (use-package pandoc-mode
    :hook ((text-mode) . pandoc-mode)
    :diminish pandoc-mode)
#+end_src

** TOC
#+begin_src emacs-lisp
(use-package toc-org
  :hook (org-mode . toc-org-mode))
#+end_src

* PDF
** PDF Tools
#+begin_src emacs-lisp
(pdf-loader-install)
#+end_src
* Start Server
#+begin_src emacs-lisp
(server-start)
#+end_src
