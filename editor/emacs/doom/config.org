#+title: Doom Emacs Configuration
#+author: Vedant "cupkax" Sansare
#+date: {{{modification-time(%Y-%m-%d %H:%M, t)}}} ;{{{timezone}}}, {{{git-rev}}}
#+startup: fold
#+property: header-args:emacs-lisp :tangle "~/.doom.d/config.el" :cache yes :results silent
#+property: header-args :tangle no :results silent

* Startup Configuration
** Lexical Bindings (Faster Startup)
#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src
** Better Defaults
*** Basic Settings
#+begin_src emacs-lisp
(setq-default delete-by-moving-to-trash t)
(setq-default window-combination-resize t)
(setq-default x-stretch-cursor t)

(setq undo-limit 80000000)
(setq evil-want-fine-undo t)
(setq auto-save-default t)

(global-subword-mode 1)
#+end_src
*** Custom.el
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

* Personal Information
#+begin_src emacs-lisp
(setq user-full-name    "Vedant Sansare")
(setq user-mail-address "vedantsansare23@gmail.com")
#+end_src

* Visual Settings
** Font Face
#+begin_src emacs-lisp
(setq doom-font                (font-spec :family "FiraCode Nerd Font" :size 16))
(setq doom-big-font            (font-spec :family "FiraCode Nerd Font" :size 20))
(setq doom-variable-pitch-font (font-spec :family "Overpass Nerd Font" :size 16))
(setq doom-serif-font          (font-spec :family "BlexMono Nerd Font" :weight 'light))
#+end_src
** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-palenight)
(delq! t custom-theme-load-path)
#+end_src
** Modeline
*** Red text in modeline
#+begin_src emacs-lisp
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "grey"))
#+end_src
*** Time in modeline
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src
*** Battery Indicator (DISABLED)
#+begin_src emacs-lisp
;(unless (equal "Battery status not available"
;               (battery))
;  (display-battery-mode 1))
#+end_src
*** Conditionally diminish =LF UTF-8=
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src
** Info Colours
#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)

(add-hook 'Info-mode-hook #'mixed-pitch-mode)
#+end_src
* Keybindings
** General
#+begin_src emacs-lisp
(use-package! general)
(defconst my-leader "SPC")
(general-create-definer my-leader-def
  :prefix my-leader)
#+end_src
** Evil
*** Miscellaneous Changes
#+begin_src emacs-lisp
(general-evil-setup t)
(general-auto-unbind-keys)
#+end_src
** Which-key
*** Key delay
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.0)
#+end_src
*** Replace =evil= with unicode symbols
#+begin_src emacs-lisp
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+end_src
* Navigation
** Ivy
#+begin_src emacs-lisp
(setq ivy-read-action-function #'ivy-hydra-read-action)
#+end_src
** Treemacs
#+begin_src emacs-lisp

#+end_src
* Window and Buffer Config
** Window Config
*** Window Title
#+begin_src emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src
*** Split Window and Preview
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))

(setq +ivy-buffer-preview t)
#+end_src
** Buffer Config
*** Buffer Names
#+begin_src emacs-lisp
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name      "► Doom")
#+end_src

*** Better Buffers
#+begin_src emacs-lisp
(use-package! bufler
  :general
  (:keymaps 'doom-leader-map
   "b b" 'bufler-workspace-switch-buffer
   "b B" 'bufler-switch-buffer)
  :config
  (setq bufler-workspace-switch-buffer-sets-workspace t))
#+end_src
** Centaur Tabs
#+begin_src emacs-lisp
(after! centaur-tabs
  (centaur-tabs-mode -1)
  (setq centaur-tabs-height 36
        centaur-tabs-set-icons t
        centaur-tabs-modified-marker "o"
        centaur-tabs-close-button "×"
        centaur-tabs-set-bar 'above
        centaur-tabs-gray-out-icons 'buffer)
  (centaur-tabs-change-fonts "P22 Underground Book" 160))
#+end_src

* Development
** Language
*** Plaintext
#+begin_src emacs-lisp
(after! text-mode
  (add-hook! 'text-mode-hook
             ;; Apply ANSI color codes
             (with-silent-modifications
               (ansi-color-apply-on-region (point-min) (point-max)))))
#+end_src
** Productivity
*** Company
**** Initial Setup
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort))
#+end_src

**** Prescient
#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)

#+end_src

**** Plain Text
#+begin_src emacs-lisp
(set-company-backend!
  '(text-mode
    markdown-mode
    gfm-mode)
  '(:seperate
    company-ispell
    company-files
    company-yasnippet))
#+end_src
*** Parentheses

* Applications
** Ebooks
*** Calibre
#+begin_src emacs-lisp
(use-package! calibredb
  :commands calibredb
  :config
  (setq calibredb-root-dir "~/Books/Calibre_Library"
        calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir)))
#+end_src
*** Nov
#+begin_src emacs-lisp
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (map! :map nov-mode-map
        :n "RET" #'nov-scroll-up)

  (defun doom-modeline-segment--nov-info ()
    (concat
     " "
     (propertize
      (cdr (assoc 'creator nov-metadata))
      'face 'doom-modeline-project-parent-dir)
     " "
     (cdr (assoc 'title nov-metadata))
     " "
     (propertize
      (format "%d/%d"
              (1+ nov-documents-index)
              (length nov-documents))
      'face 'doom-modeline-info)))

  (advice-add 'nov-render-title :override #'ignore)

  (defun +nov-mode-setup ()
    (face-remap-add-relative 'variable-pitch
                             :family "Merriweather"
                             :height 1.4
                             :width 'semi-expanded)
    (face-remap-add-relative 'default :height 1.3)
    (setq-local line-spacing 0.2
                next-screen-context-lines 4
                shr-use-colors nil)
    (require 'visual-fill-column nil t)
    (setq-local visual-fill-column-center-text t
                visual-fill-column-width 80
                nov-text-width 80)
    (visual-fill-column-mode 1)
    (hl-line-mode -1)

    (add-to-list '+lookup-definition-functions #'+lookup/dictionary-definition)

    (setq-local mode-line-format
                `((:eval
                   (doom-modeline-segment--workspace-name))
                  (:eval
                   (doom-modeline-segment--window-number))
                  (:eval
                   (doom-modeline-segment--nov-info))
                  ,(propertize
                    " %P "
                    'face 'doom-modeline-buffer-minor-mode)
                  ,(propertize
                    " "
                    'face (if (doom-modeline--active) 'mode-line 'mode-line-inactive)
                    'display `((space
                                :align-to
                                (- (+ right right-fringe right-margin)
                                   ,(* (let ((width (doom-modeline--font-width)))
                                         (or (and (= width 1) 1)
                                             (/ width (frame-char-width) 1.0)))
                                       (string-width
                                        (format-mode-line (cons "" '(:eval (doom-modeline-segment--major-mode))))))))))
                  (:eval (doom-modeline-segment--major-mode)))))

  (add-hook 'nov-mode-hook #'+nov-mode-setup))
#+end_src
** Discord
#+begin_src emacs-lisp
(setq elcord-use-major-mode-as-main-icon t)
#+end_src

* Org Mode
** Basic Config
#+begin_src emacs-lisp
(setq org-directory                     "~/Dropbox/org"
      org-use-property-inheritance      t
      org-log-done                      'time
      org-list-allow-alphabetical       t
      org-catch-invisible-edits         'smart)

;; Enable Auto Fill Mode
(add-hook 'text-mode-hook #'auto-fill-mode)

;; Arrow equivalents for vim key bindings
(map! :map evil-org-mode-map
      :after evil-org
      :n "g <up>"    #'org-backward-heading-same-level
      :n "g <down>"  #'org-forward-heading-same-level
      :n "g <left>"  #'org-up-element
      :n "g <right>" #'org-down-element)
#+end_src
** Org-Babel
#+begin_src emacs-lisp
(setq org-babel-default-header-args
      '((:session  . "none")
        (:results  . "replace")
        (:exports  . "code")
        (:cache    . "no")
        (:noweb    . "no")
        (:hlines   . "no")
        (:tangle   . "no")
        (:comments . "link")))
#+end_src
** Org Rifle
#+begin_src emacs-lisp
(use-package! helm-org-rifle
  :after org
  :general
  (:keymaps 'org-mode-map
   :states 'normal
   :prefix my-leader
   "m r" '(:ignore t :wk "Rifle (Helm)")
   "m r b" '(helm-org-rifle-current-buffer :wk "Rifle buffer")
   "m r e" '(helm-org-rifle :wk "Rifle every open buffer")
   "m r d" '(helm-org-rifle-directory :wk "Rifle from org-directory")
   "m r a" '(helm-org-rifle-agenda-files :wk "Rifle agenda")
   "m r o" '(:ignore t :wk "Occur (Persistent)")
   "m r o b" '(helm-org-rifle-current-buffer :wk "Rifle buffer")
   "m r o e" '(helm-org-rifle :wk "Rifle every open buffer")
   "m r o d" '(helm-org-rifle-directory :wk "Rifle from org-directory")
   "m r o a" '(helm-org-rifle-agenda-files :wk "Rifle agenda")))
#+end_src
** Org-Noter
#+begin_src emacs-lisp
(use-package! org-noter
  :after (:any org pdf-view)
  :config
  (setq
   org-noter-notes-window-location 'other-frame
   org-noter-always-create-frame   nil
   org-noter-hide-other            nil
   org-noter-notes-search-path     (list "~/git/phd/notes/")))
#+end_src
** Bibtex
#+begin_src emacs-lisp
(after! org-ref
  (setq
   bibtex-completion-notes-path   "~/git/phd/notes/"
   bibtex-completion-bibliography "~/Dropbox/org/Research/zotLib.bib"
   bibtex-completion-pdf-field    "file"
   bibtex-completion-notes-template-multiple-files
   (concat
    "#+TITLE: ${title}\n"
    "#+ROAM_KEY: cite:${=key=}\n"
    "#+ROAM_TAGS: ${keywords}\n"
    "* TODO Notes\n"
    ":PROPERTIES:\n"
    ":Custom_ID: ${=key=}\n"
    ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
    ":AUTHOR: ${author-abbrev}\n"
    ":JOURNAL: ${journaltitle}\n"
    ":DATE: ${date}\n"
    ":YEAR: ${year}\n"
    ":DOI: ${doi}\n"
    ":URL: ${url}\n"
    ":END:\n\n"
    )))
#+end_src
** Org-Ref
#+begin_src emacs-lisp
(use-package! org-ref
  :config
  (setq
   org-ref-completion-library        'org-ref-ivy-cite
   org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
   org-ref-default-bibliography (list "~/Dropbox/org/Research/zotLib.bib")
   org-ref-bibliography-notes         "~/git/phd/notes/bibnotes.org"
   org-ref-note-title-format          "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
   org-ref-notes-directory            "~/git/phd/notes/"
   org-ref-notes-function             'orb-edit-notes))
#+end_src
** Org-Roam
*** Roam Directory
#+begin_src emacs-lisp
(setq org-roam-directory  "~/git/phd/notes/")
#+end_src
*** Org-Roam Bibtex
#+begin_src emacs-lisp
 (use-package! org-roam-bibtex
   :after (org-roam)
   :hook (org-roam-mode . org-roam-bibtex-mode)
   :config
   (setq org-roam-bibtex-preformat-keywords
         '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
   (setq orb-templates
         '(("r" "ref" plain (function org-roam-capture--get-point)
            ""
            :file-name "${slug}"
            :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}\n#+ROAM_TAGS:

 - keywords :: ${keywords}

 \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

            :unnarrowed t))))
#+end_src
* Writing
** Dictionary
*** Hunspell
#+begin_src shell :tangle (if (file-exists-p "/usr/share/myspell/en-custom.dic") "no" "setup.sh")
cd /tmp
curl -o "hunspell-en-custom.zip" 'http://app.aspell.net/create?max_size=80&spelling=GBs&spelling=AU&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=hunspell'
unzip "hunspell-en-custom.zip"

sudo chown root:root en-custom.*
sudo mv en-custom.{aff,dic} /usr/share/myspell/
#+end_src
*** Configuration
#+begin_src emacs-lisp
(setq ispell-dictionary "en-custom")
(setq ispell-personal-dictionary (expand-file-name ".ispell_personal" doom-private-dir))
#+end_src
** Abbrev Mode
#+begin_src emacs-lisp
(use-package abbrev
  :init
  (setq-default abbrev-mode t)
  ;; a hook funtion that sets the abbrev-table to org-mode-abbrev-table
  ;; whenever the major mode is a text mode
  (defun tec/set-text-mode-abbrev-table ()
    (if (derived-mode-p 'text-mode)
        (setq local-abbrev-table org-mode-abbrev-table)))
  :commands abbrev-mode
  :hook
  (abbrev-mode . tec/set-text-mode-abbrev-table)
  :config
  (setq abbrev-file-name (expand-file-name "abbrev.el" doom-private-dir))
  (setq save-abbrevs 'silently))
#+end_src


** Writeroom
#+begin_src emacs-lisp
(after! writeroom-mode
  (add-hook 'writeroom-mode-hook
            (defun +zen-cleaner-org ()
              (when (and (eq major-mode 'org-mode) writeroom-mode)
                (setq-local -display-line-numbers display-line-numbers
                            display-line-numbers nil)
                (setq-local -org-indent-mode org-indent-mode)
                (org-indent-mode -1)
                (when (featurep 'org-superstar)
                  (setq-local -org-superstar-headline-bullets-list org-superstar-headline-bullets-list
                              ;; org-superstar-headline-bullets-list '("🙐" "🙑" "🙒" "🙓" "🙔" "🙕" "🙖" "🙗")
                              org-superstar-headline-bullets-list '("🙘" "🙙" "🙚" "🙛")
                              -org-superstar-remove-leading-stars org-superstar-remove-leading-stars
                              org-superstar-remove-leading-stars t)
                  (org-superstar-restart)))))
  (add-hook 'writeroom-mode-disable-hook
            (defun +zen-dirty-org ()
              (when (eq major-mode 'org-mode)
                (setq-local display-line-numbers -display-line-numbers)
                (when -org-indent-mode
                  (org-indent-mode 1))
                (when (featurep 'org-superstar)
                  (setq-local org-superstar-headline-bullets-list -org-superstar-headline-bullets-list
                              org-superstar-remove-leading-stars -org-superstar-remove-leading-stars)
                  (org-superstar-restart))))))
#+end_src

* PDF Tools
#+begin_src emacs-lisp
(after! pdf-view
  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-width)
  (setq pdf-annot-activate-created-annotations t
        pdf-view-resize-factor 1.1)
  (map!
   :map pdf-view-mode-map
   :n "g g"          #'pdf-view-first-page
   :n "G"            #'pdf-view-last-page
   :n "N"            #'pdf-view-next-page-command
   :n "E"            #'pdf-view-previous-page-command
   :n "e"            #'evil-collection-pdf-view-previous-line-or-previous-page
   :n "n"            #'evil-collection-pdf-view-next-line-or-next-page
   :localleader
   (:prefix "o"
    (:prefix "n"
     :desc "Insert" "i" 'org-noter-insert-note
     ))
   ))
#+end_src


* Doom Configuration
** Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

#+name: init.el
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments none
;;; init.el -*- lexical-binding: t; -*-

(doom! :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+end_src
*** doom-completion
#+name: doom-completion
#+begin_src emacs-lisp
(company
 +childframe)
;;helm
;;ido
(ivy
 +childframe
 +prescient
 +icons
 +fuzzy)
#+end_src
*** doom-ui
#+name: doom-ui
#+begin_src emacs-lisp
deft
doom
doom-dashboard
doom-quit
fill-column
hl-todo
hydra
indent-guides
(ligatures
 +extra)
modeline
nav-flash
ophints
(popup
 +all
 +defaults)
(tabs                      ; an tab bar for Emacs
 +centaur-tabs)           ; ... with prettier tabs
treemacs
;;unicode                    ; extended unicode support for various languages
vc-gutter
vi-tilde-fringe
(window-select
 +numbers)
workspaces
zen                          ; distraction-free coding or writing
#+end_src
*** doom-editor
#+name: doom-editor
#+begin_src emacs-lisp
(evil
 +everywhere)
file-templates
fold
(format
 +onsave)
multiple-cursors
rotate-text
snippets
word-wrap
#+end_src
*** doom-emacs
#+name: doom-emacs
#+begin_src emacs-lisp
(dired
 +ranger
 +icons)
electric
(ibuffer +icons)
(undo +tree)
vc
#+end_src
*** doom-term
#+name: doom-term
#+begin_src emacs-lisp
vterm
#+end_src
*** doom-checkers
#+name: doom-checkers
#+begin_src emacs-lisp
(syntax
 +childframe)
spell
grammar
#+end_src
*** doom-tools
#+name: doom-tools
#+begin_src emacs-lisp
direnv
editorconfig
;;ein                        ; tame Jupyter notebooks with emacs
(eval +overlay)
gist
(lookup
 +offline
 +dictionary
 +docsets)
lsp
(magit
 +forge)
make
;;pass                       ; password manager for nerds
pdf
rgb
#+end_src
*** doom-os
#+name: doom-os
#+begin_src emacs-lisp
tty
#+end_src
*** doom-lang (Language Support)
#+name: doom-lang
#+begin_src emacs-lisp
(csharp
 +lsp)
data
emacs-lisp
json
(javascript +lsp)
;;ledger                      ; an accounting system in Emacs
lua
markdown
;;nix
(org
 ;;+jupyter                   ; ipython/jupyter support for babel
 ;;+pomodoro                  ; be fruitful with the tomato technique
 ;;+present                   ; using org-mode for presentations
 +dragndrop                   ; drag & drop files/images into org buffers
 +gnuplot                     ; who doesn't like pretty pictures
 +hugo                        ; use Emacs for hugo blogging
 +pandoc                      ; export-with-pandoc support
 +pretty                      ; yessss my pretties! (nice unicode symbols)
 +roam)                       ; wander around notes
(python
 +poetry
 +lsp)
;;scheme                      ; a fully conniving family of lisps
sh
web
yaml
#+end_src
*** doom-email
#+name: doom-email
#+begin_src emacs-lisp
(mu4e +org +gmail)
#+end_src
*** doom-app
#+name: doom-app
#+begin_src emacs-lisp
;;calendar
;;irc                          ; how neckbeards socialize
;;(rss +org)                   ; emacs as an RSS reader
;;twitter                    ; twitter client https://twitter.com/vnought
#+end_src
*** doom-config
#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src
* Package Loading
:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.doom.d/packages.el" :comments no
:END:
Do not byte compile
#+begin_src emacs-lisp :tangle "~/.doom.d/packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+end_src
** Fun Packages
*** Tell em about it
#+begin_src emacs-lisp
(package! elcord)
#+end_src
** Aesthetics
*** Bufler
#+begin_src emacs-lisp
(package! bufler)
#+end_src
*** Dired Icons
*** Evil Better Visual Line
#+begin_src emacs-lisp
(package! evil-better-visual-line)
#+end_src
*** Info Colours
#+begin_src emacs-lisp
(package! info-colors)
#+end_src
** Keybindings
#+begin_src emacs-lisp
(package! general)
#+end_src
** Magit
*** Magit Delta
#+begin_src emacs-lisp
(package! magit-delta
  :recipe (:host github
           :repo "dandavison/magit-delta"))
#+end_src
*** Magit Hub
#+begin_src emacs-lisp
(package! magithub)
#+end_src
*** Magit TODOS
#+begin_src emacs-lisp
(package! magit-org-todos)
(package! magit-todos)
#+end_src
** Flycheck
#+begin_src emacs-lisp
(package! package-lint)
(package! flycheck-package)
#+end_src
** Ebooks
*** EPUBs major mode
#+begin_src emacs-lisp
(package! nov)
#+end_src
*** Calibre
#+begin_src emacs-lisp
(package! calibredb)
#+end_src
** Org-mode
*** Declarative Capture
#+begin_src emacs-lisp
(package! doct
  :recipe (:host github
           :repo "progfolio/doct"))
#+end_src
*** Super Agenda
#+begin_src emacs-lisp
(package! org-super-agenda)
#+end_src
*** Visuals
**** Tables
#+begin_src emacs-lisp
(package! org-pretty-table-mode
  :recipe (:host github
           :repo "Fuco1/org-pretty-table"))
#+end_src
**** Pretty Tags
#+begin_src emacs-lisp
(package! org-pretty-tags)
#+end_src
*** Org Download
#+begin_src emacs-lisp
(package! org-download
  :recipe (:host github
           :repo "abo-abo/org-download"))
#+end_src
*** Org Graph View
#+begin_src emacs-lisp
(package! org-graph-view
  :recipe (:host github
           :repo "alphapapa/org-graph-view"))
#+end_src
*** Org Helm Rifle
#+begin_src emacs-lisp
(package! helm-org-rifle)
#+end_src
*** Org Noter
#+begin_src emacs-lisp
(package! org-noter)
#+end_src
*** Org Protocol Updates
#+begin_src emacs-lisp
(package! org-protocol-capture-html
  :recipe (:host github
           :repo "alphapapa/org-protocol-capture-html"))
#+end_src
*** Org Ref
#+begin_src emacs-lisp
(package! org-ref)
#+end_src
*** Org Roam Bibtex
#+begin_src emacs-lisp
(package! org-roam-bibtex)
#+end_src

** Zotero
#+begin_src emacs-lisp
(package! zotxt)
#+end_src
** Miscellaneous
*** Handle Large Files
#+begin_src emacs-lisp
(package! vlf
  :recipe (:host github
           :repo "m00natic/vlfi"
           :files ("*.el"))
  :disable t)

(use-package! vlf-setup
  :defer-incrementally
  vlf-tune
  vlf-base
  vlf-write
  vlf-search
  vlf-occur
  vlf-follow
  vlf-ediff
  vlf)
#+end_src
