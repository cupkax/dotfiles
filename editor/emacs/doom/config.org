#+title: Doom Emacs Configuration
#+author: Vedant "cupkax" Sansare
#+date: {{{modification-time(%Y-%m-%d %H:%M, t)}}} ;{{{timezone}}}, {{{git-rev}}}
#+startup: fold
#+property: header-args:emacs-lisp :tangle "~/.doom.d/config.el" :cache yes :results silent
#+property: header-args :tangle no :results silent

* Startup Configuration
** Lexical Bindings (Faster Startup)
#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src
** Better Defaults
*** Basic Settings
#+begin_src emacs-lisp
(setq-default delete-by-moving-to-trash t)
(setq-default window-combination-resize t)
(setq-default x-stretch-cursor t)

(setq undo-limit 80000000)
(setq evil-want-fine-undo t)
(setq auto-save-default t)

(global-subword-mode 1)
#+end_src
*** Custom.el
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

* Personal Information
#+begin_src emacs-lisp
(setq user-full-name    "Vedant Sansare")
(setq user-mail-address "vedantsansare23@gmail.com")
#+end_src

* Visual Settings
** Font Face
#+begin_src emacs-lisp
(setq doom-font                (font-spec :family "FiraCode Nerd Font" :size 16))
(setq doom-big-font            (font-spec :family "FiraCode Nerd Font" :size 20))
(setq doom-variable-pitch-font (font-spec :family "Overpass Nerd Font" :size 16))
(setq doom-serif-font          (font-spec :family "BlexMono Nerd Font" :weight 'light))
#+end_src
** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-palenight)
(delq! t custom-theme-load-path)
#+end_src
** Modeline
*** Red text in modeline
#+begin_src emacs-lisp
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "grey"))
#+end_src
*** Time in modeline
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src
*** Battery Indicator (DISABLED)
#+begin_src emacs-lisp
;(unless (equal "Battery status not available"
;               (battery))
;  (display-battery-mode 1))
#+end_src
*** Conditionally diminish =LF UTF-8=
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src
** Info Colours
#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)

(add-hook 'Info-mode-hook #'mixed-pitch-mode)
#+end_src
* Keybindings
** General
#+begin_src emacs-lisp
(use-package! general)
;; Creating a constant for making future changes simpler
(defconst my-leader "SPC")
;; Tell general all about it
(general-create-definer my-leader-def
  :prefix my-leader)
#+end_src
** Evil
#+begin_src emacs-lisp
;; I like short names
(general-evil-setup t)
;; Stop telling me things begin with non-prefix keys
(general-auto-unbind-keys)
#+end_src
* Window and Buffer Config
** Window Config
*** Window Title
#+begin_src emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src
*** Split Window and Preview
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))

(setq +ivy-buffer-preview t)
#+end_src
** Buffer Config
*** Buffer Names
#+begin_src emacs-lisp
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name      "► Doom")
#+end_src

*** Better Buffers
#+begin_src emacs-lisp
(use-package! bufler
  :general
  (:keymaps 'doom-leader-map
   "b b" 'bufler-workspace-switch-buffer
   "b B" 'bufler-switch-buffer)
  :config
  (setq bufler-workspace-switch-buffer-sets-workspace t))
#+end_src
** Centaur Tabs
#+begin_src emacs-lisp
(after! centaur-tabs
  (centaur-tabs-mode -1)
  (setq centaur-tabs-height 36
        centaur-tabs-set-icons t
        centaur-tabs-modified-marker "o"
        centaur-tabs-close-button "×"
        centaur-tabs-set-bar 'above
        centaur-tabs-gray-out-icons 'buffer)
  (centaur-tabs-change-fonts "P22 Underground Book" 160))
#+end_src

* Development
** Productivity
*** Company
**** Initial Setup
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort))
#+end_src

**** Prescient
#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)

#+end_src

**** Plain Text
#+begin_src emacs-lisp
(set-company-backend!
  '(text-mode
    markdown-mode
    gfm-mode)
  '(:seperate
    company-ispell
    company-files
    company-yasnippet))
#+end_src
* Applications
** Discod
#+begin_src emacs-lisp
(setq elcord-use-major-mode-as-main-icon t)
#+end_src


* Doom Configuration
** Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

#+name: init.el
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments none
;;; init.el -*- lexical-binding: t; -*-

(doom! :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+end_src
*** doom-completion
#+name: doom-completion
#+begin_src emacs-lisp
(company
 +childframe)
;;helm
;;ido
(ivy
 +childframe
 +prescient
 +icons
 +fuzzy)
#+end_src
*** doom-ui
#+name: doom-ui
#+begin_src emacs-lisp
deft
doom
doom-dashboard
doom-quit
fill-column
hl-todo
hydra
indent-guides
(ligatures
 +extra)
modeline
nav-flash
ophints
(popup
 +all
 +defaults)
(tabs                      ; an tab bar for Emacs
  +centaur-tabs)           ; ... with prettier tabs
treemacs
;;unicode                    ; extended unicode support for various languages
vc-gutter
vi-tilde-fringe
(window-select
 +numbers)
workspaces
;;zen                          ; distraction-free coding or writing
#+end_src
*** doom-editor
#+name: doom-editor
#+begin_src emacs-lisp
(evil
 +everywhere)
file-templates
fold
(format
 +onsave)
multiple-cursors
rotate-text
snippets
word-wrap
#+end_src
*** doom-emacs
#+name: doom-emacs
#+begin_src emacs-lisp
(dired
 +ranger
 +icons)
electric
(ibuffer +icons)
(undo +tree)
vc
#+end_src
*** doom-term
#+name: doom-term
#+begin_src emacs-lisp
vterm
#+end_src
*** doom-checkers
#+name: doom-checkers
#+begin_src emacs-lisp
(syntax
 +childframe)
spell
grammar
#+end_src
*** doom-tools
#+name: doom-tools
#+begin_src emacs-lisp
direnv
editorconfig
;;ein                        ; tame Jupyter notebooks with emacs
(eval +overlay)
gist
(lookup
 +offline
 +dictionary
 +docsets)
lsp
(magit
 +forge)
make
;;pass                       ; password manager for nerds
pdf
rgb
#+end_src
*** doom-os
#+name: doom-os
#+begin_src emacs-lisp
tty
#+end_src
*** doom-lang (Language Support)
#+name: doom-lang
#+begin_src emacs-lisp
(csharp
 +lsp)
data
emacs-lisp
json
(javascript +lsp)
;;ledger                      ; an accounting system in Emacs
lua
markdown
;;nix
(org
 ;;+jupyter                   ; ipython/jupyter support for babel
 ;;+pomodoro                  ; be fruitful with the tomato technique
 ;;+present                   ; using org-mode for presentations
 +dragndrop                   ; drag & drop files/images into org buffers
 +gnuplot                     ; who doesn't like pretty pictures
 +hugo                        ; use Emacs for hugo blogging
 +pandoc                      ; export-with-pandoc support
 +pretty                      ; yessss my pretties! (nice unicode symbols)
 +roam)                       ; wander around notes
(python
 +poetry
 +lsp)
;;scheme                      ; a fully conniving family of lisps
sh
web
yaml
#+end_src
*** doom-email
#+name: doom-email
#+begin_src emacs-lisp
(mu4e +org +gmail)
#+end_src
*** doom-app
#+name: doom-app
#+begin_src emacs-lisp
;;calendar
;;irc                          ; how neckbeards socialize
;;(rss +org)                   ; emacs as an RSS reader
;;twitter                    ; twitter client https://twitter.com/vnought
#+end_src
*** doom-config
#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src
* Package Loading
:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.doom.d/packages.el" :comments no
:END:
Do not byte compile
#+begin_src emacs-lisp :tangle "~/.doom.d/packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+end_src
** Fun Packages
*** Tell em about it
#+begin_src emacs-lisp
(package! elcord)
#+end_src
** Aesthetics
*** Bufler
#+begin_src emacs-lisp
(package! bufler)
#+end_src
*** Dired Icons
*** Evil Better Visual Line
#+begin_src emacs-lisp
(package! evil-better-visual-line)
#+end_src
*** Info Colours
#+begin_src emacs-lisp
(package! info-colors)
#+end_src
** Keybindings
#+begin_src emacs-lisp
(package! general)
#+end_src
** Magit
*** Magit Delta
#+begin_src emacs-lisp
(package! magit-delta
  :recipe (:host github
           :repo "dandavison/magit-delta"))
#+end_src
*** Magit Hub
#+begin_src emacs-lisp
(package! magithub)
#+end_src
*** Magit TODOS
#+begin_src emacs-lisp
(package! magit-org-todos)
(package! magit-todos)
#+end_src
** Flycheck
#+begin_src emacs-lisp
(package! package-lint)
(package! flycheck-package)
#+end_src
** Ebooks
*** EPUBs major mode
#+begin_src emacs-lisp
(package! nov)
#+end_src
*** Calibre
#+begin_src emacs-lisp
(package! calibredb)
#+end_src
** Org-mode
*** Declarative Capture
#+begin_src emacs-lisp
(package! doct
  :recipe (:host github
           :repo "progfolio/doct"))
#+end_src
*** Super Agenda
#+begin_src emacs-lisp
(package! org-super-agenda)
#+end_src
*** Visuals
**** Tables
#+begin_src emacs-lisp
(package! org-pretty-table-mode
  :recipe (:host github
           :repo "Fuco1/org-pretty-table"))
#+end_src
**** Pretty Tags
#+begin_src emacs-lisp
(package! org-pretty-tags)
#+end_src
*** Org Download
#+begin_src emacs-lisp
(package! org-download
  :recipe (:host github
           :repo "abo-abo/org-download"))
#+end_src
*** Org Graph View
#+begin_src emacs-lisp
(package! org-graph-view
  :recipe (:host github
           :repo "alphapapa/org-graph-view"))
#+end_src
*** Org Helm Rifle
#+begin_src emacs-lisp
(package! helm-org-rifle)
#+end_src
*** Org Noter
#+begin_src emacs-lisp
(package! org-noter)
#+end_src
*** Org Protocol Updates
#+begin_src emacs-lisp
(package! org-protocol-capture-html
  :recipe (:host github
           :repo "alphapapa/org-protocol-capture-html"))
#+end_src
*** Org Ref
#+begin_src emacs-lisp
(package! org-ref)
#+end_src
*** Org Roam Bibtex
#+begin_src emacs-lisp
(package! org-roam-bibtex)
#+end_src

** Zotero
#+begin_src emacs-lisp
(package! zotxt)
#+end_src
** Miscellaneous
*** Handle Large Files
#+begin_src emacs-lisp
(package! vlf
  :recipe (:host github
           :repo "m00natic/vlfi"
           :files ("*.el"))
  :disable t)

(use-package! vlf-setup
  :defer-incrementally
  vlf-tune
  vlf-base
  vlf-write
  vlf-search
  vlf-occur
  vlf-follow
  vlf-ediff
  vlf)
#+end_src
